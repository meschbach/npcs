// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.17.3
// source: competition/wire/competition.proto

package wire

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CompetitionV1_RegisterPersistentPlayer_FullMethodName = "/CompetitionV1/RegisterPersistentPlayer"
	CompetitionV1_QuickMatch_FullMethodName               = "/CompetitionV1/QuickMatch"
)

// CompetitionV1Client is the client API for CompetitionV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompetitionV1Client interface {
	RegisterPersistentPlayer(ctx context.Context, in *RegisterPlayerIn, opts ...grpc.CallOption) (*RegisterPlayerOut, error)
	QuickMatch(ctx context.Context, in *QuickMatchIn, opts ...grpc.CallOption) (*QuickMatchOut, error)
}

type competitionV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCompetitionV1Client(cc grpc.ClientConnInterface) CompetitionV1Client {
	return &competitionV1Client{cc}
}

func (c *competitionV1Client) RegisterPersistentPlayer(ctx context.Context, in *RegisterPlayerIn, opts ...grpc.CallOption) (*RegisterPlayerOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPlayerOut)
	err := c.cc.Invoke(ctx, CompetitionV1_RegisterPersistentPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionV1Client) QuickMatch(ctx context.Context, in *QuickMatchIn, opts ...grpc.CallOption) (*QuickMatchOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuickMatchOut)
	err := c.cc.Invoke(ctx, CompetitionV1_QuickMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompetitionV1Server is the server API for CompetitionV1 service.
// All implementations must embed UnimplementedCompetitionV1Server
// for forward compatibility.
type CompetitionV1Server interface {
	RegisterPersistentPlayer(context.Context, *RegisterPlayerIn) (*RegisterPlayerOut, error)
	QuickMatch(context.Context, *QuickMatchIn) (*QuickMatchOut, error)
	mustEmbedUnimplementedCompetitionV1Server()
}

// UnimplementedCompetitionV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompetitionV1Server struct{}

func (UnimplementedCompetitionV1Server) RegisterPersistentPlayer(context.Context, *RegisterPlayerIn) (*RegisterPlayerOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPersistentPlayer not implemented")
}
func (UnimplementedCompetitionV1Server) QuickMatch(context.Context, *QuickMatchIn) (*QuickMatchOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickMatch not implemented")
}
func (UnimplementedCompetitionV1Server) mustEmbedUnimplementedCompetitionV1Server() {}
func (UnimplementedCompetitionV1Server) testEmbeddedByValue()                       {}

// UnsafeCompetitionV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompetitionV1Server will
// result in compilation errors.
type UnsafeCompetitionV1Server interface {
	mustEmbedUnimplementedCompetitionV1Server()
}

func RegisterCompetitionV1Server(s grpc.ServiceRegistrar, srv CompetitionV1Server) {
	// If the following call pancis, it indicates UnimplementedCompetitionV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CompetitionV1_ServiceDesc, srv)
}

func _CompetitionV1_RegisterPersistentPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPlayerIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionV1Server).RegisterPersistentPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitionV1_RegisterPersistentPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionV1Server).RegisterPersistentPlayer(ctx, req.(*RegisterPlayerIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitionV1_QuickMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuickMatchIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionV1Server).QuickMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitionV1_QuickMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionV1Server).QuickMatch(ctx, req.(*QuickMatchIn))
	}
	return interceptor(ctx, in, info, handler)
}

// CompetitionV1_ServiceDesc is the grpc.ServiceDesc for CompetitionV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompetitionV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompetitionV1",
	HandlerType: (*CompetitionV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPersistentPlayer",
			Handler:    _CompetitionV1_RegisterPersistentPlayer_Handler,
		},
		{
			MethodName: "QuickMatch",
			Handler:    _CompetitionV1_QuickMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "competition/wire/competition.proto",
}

const (
	Orchestration_Spawn_FullMethodName = "/Orchestration/Spawn"
)

// OrchestrationClient is the client API for Orchestration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestrationClient interface {
	Spawn(ctx context.Context, in *SpawnIn, opts ...grpc.CallOption) (*SpawnOut, error)
}

type orchestrationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestrationClient(cc grpc.ClientConnInterface) OrchestrationClient {
	return &orchestrationClient{cc}
}

func (c *orchestrationClient) Spawn(ctx context.Context, in *SpawnIn, opts ...grpc.CallOption) (*SpawnOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnOut)
	err := c.cc.Invoke(ctx, Orchestration_Spawn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestrationServer is the server API for Orchestration service.
// All implementations must embed UnimplementedOrchestrationServer
// for forward compatibility.
type OrchestrationServer interface {
	Spawn(context.Context, *SpawnIn) (*SpawnOut, error)
	mustEmbedUnimplementedOrchestrationServer()
}

// UnimplementedOrchestrationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestrationServer struct{}

func (UnimplementedOrchestrationServer) Spawn(context.Context, *SpawnIn) (*SpawnOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spawn not implemented")
}
func (UnimplementedOrchestrationServer) mustEmbedUnimplementedOrchestrationServer() {}
func (UnimplementedOrchestrationServer) testEmbeddedByValue()                       {}

// UnsafeOrchestrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestrationServer will
// result in compilation errors.
type UnsafeOrchestrationServer interface {
	mustEmbedUnimplementedOrchestrationServer()
}

func RegisterOrchestrationServer(s grpc.ServiceRegistrar, srv OrchestrationServer) {
	// If the following call pancis, it indicates UnimplementedOrchestrationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Orchestration_ServiceDesc, srv)
}

func _Orchestration_Spawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).Spawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestration_Spawn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).Spawn(ctx, req.(*SpawnIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestration_ServiceDesc is the grpc.ServiceDesc for Orchestration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Orchestration",
	HandlerType: (*OrchestrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spawn",
			Handler:    _Orchestration_Spawn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "competition/wire/competition.proto",
}
