// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.17.3
// source: t3/network/game.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	T3_StartGame_FullMethodName = "/T3/startGame"
	T3_MoveMade_FullMethodName  = "/T3/moveMade"
	T3_NextMove_FullMethodName  = "/T3/nextMove"
	T3_Concluded_FullMethodName = "/T3/concluded"
)

// T3Client is the client API for T3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type T3Client interface {
	StartGame(ctx context.Context, in *StartGameIn, opts ...grpc.CallOption) (*StartGameOut, error)
	MoveMade(ctx context.Context, in *MoveMadeIn, opts ...grpc.CallOption) (*MoveMadeOut, error)
	NextMove(ctx context.Context, in *NextMoveIn, opts ...grpc.CallOption) (*NextMoveOut, error)
	Concluded(ctx context.Context, in *ConclusionIn, opts ...grpc.CallOption) (*ConclusionOut, error)
}

type t3Client struct {
	cc grpc.ClientConnInterface
}

func NewT3Client(cc grpc.ClientConnInterface) T3Client {
	return &t3Client{cc}
}

func (c *t3Client) StartGame(ctx context.Context, in *StartGameIn, opts ...grpc.CallOption) (*StartGameOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGameOut)
	err := c.cc.Invoke(ctx, T3_StartGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t3Client) MoveMade(ctx context.Context, in *MoveMadeIn, opts ...grpc.CallOption) (*MoveMadeOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveMadeOut)
	err := c.cc.Invoke(ctx, T3_MoveMade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t3Client) NextMove(ctx context.Context, in *NextMoveIn, opts ...grpc.CallOption) (*NextMoveOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextMoveOut)
	err := c.cc.Invoke(ctx, T3_NextMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t3Client) Concluded(ctx context.Context, in *ConclusionIn, opts ...grpc.CallOption) (*ConclusionOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConclusionOut)
	err := c.cc.Invoke(ctx, T3_Concluded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// T3Server is the server API for T3 service.
// All implementations must embed UnimplementedT3Server
// for forward compatibility.
type T3Server interface {
	StartGame(context.Context, *StartGameIn) (*StartGameOut, error)
	MoveMade(context.Context, *MoveMadeIn) (*MoveMadeOut, error)
	NextMove(context.Context, *NextMoveIn) (*NextMoveOut, error)
	Concluded(context.Context, *ConclusionIn) (*ConclusionOut, error)
	mustEmbedUnimplementedT3Server()
}

// UnimplementedT3Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedT3Server struct{}

func (UnimplementedT3Server) StartGame(context.Context, *StartGameIn) (*StartGameOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedT3Server) MoveMade(context.Context, *MoveMadeIn) (*MoveMadeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveMade not implemented")
}
func (UnimplementedT3Server) NextMove(context.Context, *NextMoveIn) (*NextMoveOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextMove not implemented")
}
func (UnimplementedT3Server) Concluded(context.Context, *ConclusionIn) (*ConclusionOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concluded not implemented")
}
func (UnimplementedT3Server) mustEmbedUnimplementedT3Server() {}
func (UnimplementedT3Server) testEmbeddedByValue()            {}

// UnsafeT3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to T3Server will
// result in compilation errors.
type UnsafeT3Server interface {
	mustEmbedUnimplementedT3Server()
}

func RegisterT3Server(s grpc.ServiceRegistrar, srv T3Server) {
	// If the following call pancis, it indicates UnimplementedT3Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&T3_ServiceDesc, srv)
}

func _T3_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T3Server).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: T3_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T3Server).StartGame(ctx, req.(*StartGameIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _T3_MoveMade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveMadeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T3Server).MoveMade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: T3_MoveMade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T3Server).MoveMade(ctx, req.(*MoveMadeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _T3_NextMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextMoveIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T3Server).NextMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: T3_NextMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T3Server).NextMove(ctx, req.(*NextMoveIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _T3_Concluded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConclusionIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T3Server).Concluded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: T3_Concluded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T3Server).Concluded(ctx, req.(*ConclusionIn))
	}
	return interceptor(ctx, in, info, handler)
}

// T3_ServiceDesc is the grpc.ServiceDesc for T3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var T3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "T3",
	HandlerType: (*T3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startGame",
			Handler:    _T3_StartGame_Handler,
		},
		{
			MethodName: "moveMade",
			Handler:    _T3_MoveMade_Handler,
		},
		{
			MethodName: "nextMove",
			Handler:    _T3_NextMove_Handler,
		},
		{
			MethodName: "concluded",
			Handler:    _T3_Concluded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t3/network/game.proto",
}
