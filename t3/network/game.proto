syntax = "proto3";
option go_package = "t3/network";

/**
 * T3 is a game dialed into by the game engine, when the particular AI agent is exported for general play.
 */
service T3 {
  rpc startGame(StartGameIn) returns (StartGameOut);
  rpc moveMade(MoveMadeIn) returns (MoveMadeOut);
  rpc nextMove(NextMoveIn) returns (NextMoveOut);
  rpc concluded(ConclusionIn) returns (ConclusionOut);
}

/**
 * T3Push is an interface exported by the game engine for clients to push in moves.
 */
service T3Push {
  /**
   * connectToGame creates a streaming event connection to the target game.  Each advance in the game will be sent
   * as an event.
   */
  rpc connectToGame(JoinGameIn) returns (stream T3PushEvent);
  /**
   * Pushes a move onto the player stack.
   */
  rpc move(PushMoveIn) returns (PushMoveOut);
}


message StartGameIn {
  int64 yourPlayer = 1;
}

message StartGameOut {
  int64 gameID = 1;
}

message JoinGameIn {
  /**
   * gameID is the game to connect to for playing.
   */
  string gameID = 1;
}

message T3PushEvent {
  optional JoinGameOut initial = 1;
  optional MoveMadeIn move = 2;
  optional ConclusionIn conclusion = 3;
  optional PlayerTurn doTurn = 4;
}

message JoinGameOut {
  /**
   * yourPlayer indicates the player ID the client is connected to.
   */
  int64 yourPlayer = 1;
}

message PushMoveIn {
  string gameID = 1;
  NextMoveOut move = 2;
}

message PushMoveOut {

}

message MoveMadeIn {
  int64 player = 1;
  int64 row = 2;
  int64 column = 3;
  int64 gameID = 4;
}

message MoveMadeOut {
}

message NextMoveIn {
  int64 gameID = 1;
}

message NextMoveOut {
  int64 row = 2;
  int64 column = 3;
}

message ConclusionIn {
  int64 gameID = 1;
  bool stalemate = 2;
  int64 winner = 3;
  bool withdraw = 4;
}

message ConclusionOut {
}

message PlayerTurn {
}
